#!/usr/bin/python
# -*- coding: utf-8 -*-
import os
import ConfigParser

SUPERVISOR_SETTINGS = 'customizeme.cfg'
SUPERVISOR_CONFIG = 'parts/supervisor/supervisord.conf'


def find_config_files(path):
    return ['{}/supervisord.conf'.format(root) for root, dirs, files in os.walk(path) if 'supervisord.conf' in files]


def configure_supervisor():
    """
        Merges supervisord configuration files
    """

    # Extract paths from files that must be merged
    # from the [supervisor].parts option of the customizeme.cfg file
    # Items can be paths where to look for files or individual files

    customizeme = ConfigParser.ConfigParser()
    customizeme.read(SUPERVISOR_SETTINGS)
    parts = customizeme.get('supervisor', 'parts')
    config_sources = list(set([path.strip() for path in parts.split('\n')]))

    # If no paths privided, search for config files
    # starting 2 folders avobe
    if not config_sources:
        base_path = '/'.join(os.getcwd().split('/')[:-2])
        config_sources.append(base_path)

    # Search in sources. If sources is a path, search all supervisord.conf
    # files in the tree , otherwise add the source directly
    config_files = []
    for source in config_sources:
        if os.path.isdir(source):
            config_files += find_config_files(source)
        else:
            config_files.append(source)

    # Add main supervisor config file first
    config_files.insert(0, SUPERVISOR_CONFIG)

    # Create empty config file
    output = ConfigParser.ConfigParser()

    # Iterate trough all config files
    for cfg in config_files:
        if not os.path.exists(cfg):
            print "> Config file {} doesn't exists".format(cfg)
            continue

        print '> Parsing {}'.format(cfg)

        config = ConfigParser.ConfigParser()
        config.read(cfg)

        ignore_programs = cfg == SUPERVISOR_CONFIG

        # For each section found, add it to the new config file
        # Sections already presetn won't be added again,

        for section in config.sections():
            # Ignore [program*] sections from master config file
            is_program_section = 'program' in section
            if ignore_programs and is_program_section:
                continue

            # Rename section names that include chaussette as a wsgi server
            # to use de fcgi supervisor configuration
            section_name = section
            if section not in output.sections():
                if is_program_section:
                    if 'command' in config.options(section):
                        if 'chaussette' in config.get(section, 'command'):
                            section_name = section.replace('program', 'fcgi-program')
                output.add_section(section_name)
                print '  + Adding section {}'.format(section_name)

            # Add all the options of the section
            # Options already set, won't be overwrited
            for option in config.options(section):
                if option not in output.options(section_name):
                    output.set(section_name, option, config.get(section, option))

    # Overwrite maste config file with merged configuration
    with open(SUPERVISOR_CONFIG, 'w') as out_cfg:
        output.write(out_cfg)
        print '> Writen {}'.format(SUPERVISOR_CONFIG)

if __name__ == '__main__':
    print
    configure_supervisor()
    print
